from itertools import combinations

"""
parameter(s) 
    - juices : type - list of strings
    - caloriesPerJuice : type - list of integers
    - targetCalorieIntake : integer
Example: (['a','a','a','b','b','c','c'],[3,15,9,34], 56)
returns - empty OR sorted list of strings which is first successful combination of juice mix
Example: ['aabc']
"""
def findJuiceMix(juices, caloriesPerJuice, targetCalorieIntake):
    # remove fist element as its not a calorie
    caloriesPerJuice = caloriesPerJuice[1:]

    # Create a dictionary to map unique alphabets to numbers in list2
    alphabet_mapping = {char: num for char, num in zip(sorted(set(juices)), caloriesPerJuice)}
    # here
    # -- set(juices) converts the string juices into a set, which removes duplicate characters. This is assuming juices is a string containing different types of juices
    # -- sorted(set(juices)): sorts the unique characters obtained from juices in alphabetical order.
    # -- zip(sorted(set(juices)), caloriesPerJuice): creates an iterator that combines each character from the sorted set of juices with the corresponding element from the caloriesPerJuice list.
    # -----also pairs the characters and their corresponding calorie values
    # -- {char: num for char, num in ...}: iterates over the pairs of characters and numbers obtained from the zip operation, and creates a dictionary where each character is a key, and the corresponding number is the value.

    # Expand caloriesPerJuice to the length of juiceNames by mapping values
    caloriesPerJuice = [alphabet_mapping[char] for char in juices]

    # Not needed at present
    # Check if the lengths of juices and caloriesPerJuice are the same
    # if len(juices) != len(caloriesPerJuice):
    #     print("Error: The lengths of 'juices' and 'caloriesPerJuice' must be the same.")
    #     return

    # Prepare all possible calorie value combinations
    calorieValueCombinations = [comb for i in range(1, len(juices) + 1) for comb in combinations(range(len(juices)), i)]
    # here
    # -- range(1, len(juices) + 1): generates a range of integers from 1 to the length of the juices string (inclusive)
    # ---- This represents the size of the combinations to be generated,
    # ---- ranging from combinations of 1 index to combinations of the full length of the string
    # -- range(len(juices)): generates a range of integers from 0 to the length of the juices string (exclusive). These are the indices of the characters in the string
    # -- combinations(range(len(juices)), i):  generates all combinations of i indices from the range of indices
    # -- for comb in ...: iterates over all combinations generated by the inner loop
    # -- [comb for ...]: list comprehension that collects all the combinations into a list

    # Initialized found_combination as an empty list as best practice
    found_combination = []

    # sum values in every combination and find the first match with targetCalorieIntake
    for indices in calorieValueCombinations:
        current_sum = sum(caloriesPerJuice[i] for i in indices)
        if current_sum == targetCalorieIntake:
            found_combination = [juices[i] for i in indices]
            break  # Exit the loop if a successful combination is found

    return ''.join(found_combination)